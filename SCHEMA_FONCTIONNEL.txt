═══════════════════════════════════════════════════════════════
    🎨 SCHÉMA FONCTIONNEL DU SYSTÈME
    Vue d'ensemble visuelle
═══════════════════════════════════════════════════════════════

📍 TABLE DES MATIÈRES
═══════════════════════════════════════════════════════════════

1. Architecture Globale
2. Flux de Données
3. Modules et Interactions
4. Exemples de Scénarios
5. Chronologie d'Exécution

═══════════════════════════════════════════════════════════════
    1. ARCHITECTURE GLOBALE
═══════════════════════════════════════════════════════════════

     ┌─────────────────────────────────────────────────┐
     │             👤 UTILISATEUR                      │
     │         (via navigateur web)                    │
     └──────────────────┬──────────────────────────────┘
                        │ HTTP/HTTPS
                        ↓
     ┌─────────────────────────────────────────────────┐
     │          🖥️  FRONTEND (Angular)                 │
     │                                                  │
     │  Pages:                                          │
     │  • Dashboard (statistiques)                      │
     │  • Tâches (création/gestion)                     │
     │  • Logs (historique)                             │
     │  • Fichiers (upload/download)                    │
     │  • Destinataires (notifications)                 │
     │  • Paramètres (configuration)                    │
     └──────────────────┬──────────────────────────────┘
                        │ REST API
                        ↓
     ┌─────────────────────────────────────────────────┐
     │          ⚙️  BACKEND (ASP.NET Core)             │
     │                                                  │
     │  Controllers:                                    │
     │  • AuthController (connexion)                    │
     │  • TasksController (tâches)                      │
     │  • LogsController (logs)                         │
     │  • FilesController (fichiers)                    │
     │  • RecipientsController (destinataires)          │
     │                                                  │
     │  Services:                                       │
     │  • ExcelService (traitement Excel)               │
     │  • EmailService (emails)                         │
     │  • CortexService (API externe)                   │
     │  • WhatsAppService (WhatsApp)                    │
     │  • ChimeService (Chime)                          │
     │  • ScheduleService (planification)               │
     └──────────┬───────────────┬──────────────────────┘
                │               │
                │               └──────────────────┐
                ↓                                  ↓
     ┌─────────────────────────────┐   ┌──────────────────────┐
     │  🗄️  SQL SERVER             │   │  🔧 HANGFIRE         │
     │                              │   │                      │
     │  Tables:                     │   │  Jobs Manager:       │
     │  • Users                     │   │  • Recurring Jobs    │
     │  • ScheduledTasks            │   │  • Fire-and-Forget   │
     │  • TaskExecutionLogs         │   │  • Delayed Jobs      │
     │  • FileUploads               │   │  • Retry Logic       │
     │  • NotificationRecipients    │   │  • Queue Management  │
     │  • Hangfire tables           │   │                      │
     └──────────────────────────────┘   └──────────────────────┘

═══════════════════════════════════════════════════════════════
    2. FLUX DE DONNÉES - Vue Simplifiée
═══════════════════════════════════════════════════════════════

CRÉATION D'UNE TÂCHE PLANIFIÉE
─────────────────────────────────────────────────────────────

Utilisateur           Frontend           Backend            Hangfire
    │                    │                  │                  │
    │ 1. Remplit form    │                  │                  │
    │ ─────────────────> │                  │                  │
    │                    │                  │                  │
    │                    │ 2. POST /api/    │                  │
    │                    │    tasks         │                  │
    │                    │ ───────────────> │                  │
    │                    │                  │                  │
    │                    │                  │ 3. Convert       │
    │                    │                  │    JSON → CRON   │
    │                    │                  │ ─────────────┐   │
    │                    │                  │ <────────────┘   │
    │                    │                  │                  │
    │                    │                  │ 4. Save DB       │
    │                    │                  │ ──────┐          │
    │                    │                  │ <─────┘          │
    │                    │                  │                  │
    │                    │                  │ 5. Register Job  │
    │                    │                  │ ──────────────> │
    │                    │                  │                  │
    │                    │ 6. Response 201  │                  │
    │                    │ <─────────────── │                  │
    │                    │                  │                  │
    │ 7. Confirmation   │                  │                  │
    │ <───────────────── │                  │                  │
    │                    │                  │                  │
    │                    │                  │                  │
    │           ⏰ Quand l'heure arrive...                     │
    │                    │                  │                  │
    │                    │                  │ 8. Trigger Job  │
    │                    │                  │ <─────────────── │
    │                    │                  │                  │
    │                    │                  │ 9. Execute Job   │
    │                    │                  │ ─────┐           │
    │                    │                  │ <────┘           │
    │                    │                  │                  │
    │                    │                  │ 10. Save Log     │
    │                    │                  │ ──────┐          │
    │                    │                  │ <─────┘          │
    │                    │                  │                  │
    │                    │ 11. Notification │                  │
    │ <──────────────────────────────────── │                  │
    │   (Email/WhatsApp) │                  │                  │


EXÉCUTION D'UNE TÂCHE AUTOMATIQUE
─────────────────────────────────────────────────────────────

 Hangfire          Backend Job         Services         Externes
    │                  │                   │                │
    │ 1. Trigger      │                   │                │
    │ ──────────────> │                   │                │
    │                  │                   │                │
    │                  │ 2. Start          │                │
    │                  │ ────────────────┐ │                │
    │                  │                 │ │                │
    │                  │ 3. Call Service │ │                │
    │                  │ ──────────────────>│                │
    │                  │                   │                │
    │                  │                   │ 4. API Call    │
    │                  │                   │ ──────────────>│
    │                  │                   │                │
    │                  │                   │ 5. Response    │
    │                  │                   │ <──────────────│
    │                  │                   │                │
    │                  │ 6. Process Data   │                │
    │                  │ <────────────────── │              │
    │                  │                   │                │
    │                  │ 7. Generate File  │                │
    │                  │ ──────────────────>│                │
    │                  │                   │                │
    │                  │ 8. Send Email     │                │
    │                  │ ──────────────────>│                │
    │                  │                   │                │
    │                  │                   │ 9. SMTP        │
    │                  │                   │ ──────────────>│
    │                  │                   │                │
    │                  │ 10. Log Result    │                │
    │                  │ ────────────────┐ │                │
    │                  │                 │ │                │
    │ 11. Complete    │ <───────────────┘ │                │
    │ <────────────── │                   │                │

═══════════════════════════════════════════════════════════════
    3. MODULES ET LEURS INTERACTIONS
═══════════════════════════════════════════════════════════════

ÉCOSYSTÈME DES MODULES
─────────────────────────────────────────────────────────────

                    ┌───────────────────┐
                    │  MODULE PRINCIPAL │
                    │   HANGFIRE        │
                    │  (Orchestrateur)  │
                    └─────────┬─────────┘
                              │
             ┌────────────────┼────────────────┐
             │                │                │
             ↓                ↓                ↓
    ┌────────────────┐ ┌────────────┐ ┌──────────────┐
    │ MODULE EXCEL   │ │  MODULE    │ │   MODULE     │
    │                │ │  EMAIL     │ │   API        │
    │ • Lecture      │ │            │ │   CORTEX     │
    │ • Écriture     │ │ • IMAP     │ │              │
    │ • Génération   │ │ • SMTP     │ │ • GET        │
    │ • Validation   │ │ • PJ       │ │ • POST       │
    └────────────────┘ └────────────┘ └──────────────┘
             │                │                │
             └────────────────┼────────────────┘
                              │
                              ↓
                    ┌───────────────────┐
                    │     MODULE        │
                    │  NOTIFICATIONS    │
                    └─────────┬─────────┘
                              │
             ┌────────────────┼────────────────┐
             │                │                │
             ↓                ↓                ↓
    ┌────────────────┐ ┌────────────┐ ┌──────────────┐
    │   📧 EMAIL     │ │ 📱 WHATSAPP│ │  💬 CHIME    │
    │                │ │            │ │              │
    │ • SMTP         │ │ • Twilio   │ │ • Webhook    │
    │ • Templates    │ │ • Messages │ │ • Channels   │
    │ • Pièces J.    │ │ • Images   │ │ • Mentions   │
    └────────────────┘ └────────────┘ └──────────────┘


FLUX D'INTERACTION ENTRE MODULES
─────────────────────────────────────────────────────────────

Scénario: Traiter un fichier Excel et notifier

┌──────────────┐    1. Upload     ┌──────────────┐
│ Utilisateur  │ ───────────────> │   Frontend   │
└──────────────┘                  └──────┬───────┘
                                         │ 2. POST
                                         ↓
                                  ┌──────────────┐
                                  │   Backend    │
                                  │  Controller  │
                                  └──────┬───────┘
                                         │ 3. Save
                                         ↓
                                  ┌──────────────┐
                                  │   Database   │
                                  └──────────────┘
                                         │
                                         │ 4. Trigger
                                         ↓
                                  ┌──────────────┐
                                  │   Hangfire   │
                                  │     Job      │
                                  └──────┬───────┘
                                         │ 5. Call
                                         ↓
                                  ┌──────────────┐
                                  │ExcelService  │◄──┐
                                  └──────┬───────┘   │
                                         │ 6. Process│
                                         └───────────┘
                                         │
                                         │ 7. Generate
                                         ↓
                                  ┌──────────────┐
                                  │ File Result  │
                                  └──────┬───────┘
                                         │ 8. Call
                                         ↓
                                  ┌──────────────┐
                                  │EmailService  │
                                  └──────┬───────┘
                                         │ 9. Send
                                         ↓
                                  ┌──────────────┐
                                  │  SMTP Server │
                                  └──────────────┘
                                         │
                                         │ 10. Call
                                         ↓
                                  ┌──────────────┐
                                  │WhatsAppSvc   │
                                  └──────┬───────┘
                                         │ 11. Send
                                         ↓
                                  ┌──────────────┐
                                  │ Twilio API   │
                                  └──────────────┘

═══════════════════════════════════════════════════════════════
    4. EXEMPLES DE SCÉNARIOS COMPLETS
═══════════════════════════════════════════════════════════════

SCÉNARIO A : RAPPORT QUOTIDIEN
─────────────────────────────────────────────────────────────

Temps   │ Acteur           │ Action
────────┼──────────────────┼─────────────────────────────────
08:00:00│ Hangfire         │ ⏰ Déclenche job "RapportQuotidien"
08:00:01│ RapportJob       │ 🔌 Se connecte à API CORTEX
08:00:02│ API CORTEX       │ 📤 Renvoie données (500 lignes)
08:00:03│ RapportJob       │ 🧮 Calcule statistiques
08:00:04│ ExcelService     │ 📊 Génère fichier Excel
08:00:05│ ExcelService     │ 📈 Ajoute graphiques
08:00:06│ EmailService     │ 📧 Envoie email + PJ
08:00:07│ WhatsAppService  │ 📱 Envoie notification
08:00:08│ Database         │ 💾 Enregistre log (Succès)
08:00:09│ Dashboard        │ ✅ Affiche mise à jour

RÉSULTAT: Rapport livré en 9 secondes ! ⚡


SCÉNARIO B : TRAITEMENT COMMANDE PAR EMAIL
─────────────────────────────────────────────────────────────

Temps   │ Acteur           │ Action
────────┼──────────────────┼─────────────────────────────────
10:23:00│ Client           │ 📧 Envoie email avec commande.xlsx
10:25:00│ EmailJob         │ ⏰ S'exécute (cycle 5 min)
10:25:01│ EmailService     │ 🔌 Connexion IMAP
10:25:02│ EmailService     │ 📬 Trouve 1 email non lu
10:25:03│ EmailService     │ 📎 Télécharge commande.xlsx
10:25:04│ ExcelService     │ ✅ Valide structure fichier
10:25:05│ ExcelService     │ 📖 Lit articles (25 lignes)
10:25:06│ Database         │ 💾 Crée commande #12345
10:25:07│ ExcelService     │ 📄 Génère PDF confirmation
10:25:08│ EmailService     │ 📧 Envoie confirmation client
10:25:09│ ChimeService     │ 💬 Notifie équipe interne
10:25:10│ EmailService     │ ✓ Marque email comme lu
10:25:11│ Database         │ 💾 Log succès

RÉSULTAT: Commande traitée en 11 secondes ! ⚡
Délai max d'attente: 5 minutes (cycle email job)


SCÉNARIO C : SYNC HORAIRE API CORTEX
─────────────────────────────────────────────────────────────

Temps   │ Acteur           │ Action
────────┼──────────────────┼─────────────────────────────────
09:00:00│ Hangfire         │ ⏰ Déclenche "CortexSyncJob"
09:00:01│ CortexService    │ 🔐 Authentification API
09:00:02│ API CORTEX       │ 🎟️  Renvoie token JWT
09:00:03│ CortexService    │ 📥 GET /v1/units (500 items)
09:00:04│ CortexService    │ 🔍 Compare avec BDD locale
09:00:05│ CortexService    │ 📊 Détecte 15 nouveaux + 23 modifs
09:00:06│ Database         │ 💾 INSERT 15 nouveaux
09:00:07│ Database         │ 💾 UPDATE 23 modifications
09:00:08│ ExcelService     │ 📊 Génère rapport delta
09:00:09│ CortexService    │ ✓ POST /v1/ack (confirmation)
09:00:10│ Database         │ 💾 Log succès (38 changements)

RÉSULTAT: Sync terminée en 10 secondes ! ⚡
Prochaine sync: 10:00:00

═══════════════════════════════════════════════════════════════
    5. CHRONOLOGIE D'UNE JOURNÉE TYPE
═══════════════════════════════════════════════════════════════

00:00 ─────────────────────────────────────────────────────────
  │
  ├─ 01:00 │ 🔄 Sync CORTEX              (Horaire)
  │
  ├─ 02:00 │ 🔄 Sync CORTEX              (Horaire)
  │        │ 💾 Backup Base de Données   (Quotidien)
  │
  ├─ 03:00 │ 🔄 Sync CORTEX              (Horaire)
  │        │ 🧹 Nettoyage fichiers temp  (Quotidien)
  │
  ├─ 04:00 │ 🔄 Sync CORTEX              (Horaire)
  │
  ├─ 05:00 │ 🔄 Sync CORTEX              (Horaire)
  │
  ├─ 06:00 │ 🔄 Sync CORTEX              (Horaire)
  │        │ 📊 Rapport Mensuel          (1er du mois)
  │
  ├─ 07:00 │ 🔄 Sync CORTEX              (Horaire)
  │        │ 📊 Génération pré-rapport   (Quotidien)
  │
  ├─ 08:00 │ 🔄 Sync CORTEX              (Horaire)
  │        │ 📊 Rapport Quotidien        (Quotidien) ⭐
  │        │ 📧 Envoi email direction
  │        │ 📱 Notification WhatsApp
  │
  ├─ 08:05 │ 📬 Traitement Emails        (Toutes 5 min)
  ├─ 08:10 │ 📬 Traitement Emails        (Toutes 5 min)
  ├─ 08:15 │ 📬 Traitement Emails        (Toutes 5 min)
  │
  ├─ 09:00 │ 🔄 Sync CORTEX              (Horaire)
  │        │ 📊 Rapport Hebdomadaire     (Lundi) ⭐
  │
  │   ... (Cycles répétés toute la journée) ...
  │
  ├─ 12:00 │ 🔄 Sync CORTEX              (Horaire)
  │        │ 📊 Point de mi-journée      (Quotidien)
  │
  │   ... (Activité continue) ...
  │
  ├─ 17:00 │ 🔄 Sync CORTEX              (Horaire)
  │        │ 📊 Clôture journée          (Quotidien) ⭐
  │        │ 📧 Rapport de clôture
  │
  ├─ 18:00 │ 🔄 Sync CORTEX              (Horaire)
  │
  │   ... (Activité nocturne réduite) ...
  │
  ├─ 23:00 │ 🔄 Sync CORTEX              (Horaire)
  │        │ 💾 Sauvegarde quotidienne   (Quotidien)
  │
23:59 ─────────────────────────────────────────────────────────

Activité continue : 📬 Traitement Emails (toutes les 5 min)
                     🔍 Monitoring (toutes les 10 min)

═══════════════════════════════════════════════════════════════
    STATISTIQUES QUOTIDIENNES TYPIQUES
═══════════════════════════════════════════════════════════════

📊 VOLUME D'ACTIVITÉ
─────────────────────────────────────────────────────────────
• Sync API CORTEX           : 24 fois/jour
• Traitement Emails         : 288 fois/jour (5 min)
• Rapports générés          : 3-5 fichiers/jour
• Emails envoyés            : 10-50 /jour
• Notifications WhatsApp    : 5-20 /jour
• Logs créés                : 300-500 /jour

⚡ PERFORMANCE
─────────────────────────────────────────────────────────────
• Temps moyen par tâche     : 2-5 secondes
• Taux de succès            : 98-99%
• Disponibilité système     : 99.9%
• Retry nécessaires         : < 1%

💾 DONNÉES
─────────────────────────────────────────────────────────────
• Fichiers traités          : 20-100 /jour
• Volume données API        : 10,000-50,000 items/jour
• Lignes Excel traitées     : 5,000-20,000 /jour
• Taille logs générés       : 50-200 MB/jour

═══════════════════════════════════════════════════════════════
    LÉGENDE DES SYMBOLES
═══════════════════════════════════════════════════════════════

⏰ = Déclenchement automatique
🔄 = Synchronisation
📊 = Génération de rapport
📧 = Email
📱 = WhatsApp
💬 = Chime
📬 = Lecture email
📎 = Pièce jointe
💾 = Base de données
🔌 = Connexion API
🧮 = Calcul
✅ = Succès
❌ = Erreur
🔐 = Authentification
🧹 = Nettoyage
⭐ = Important

═══════════════════════════════════════════════════════════════
    POINTS CLÉS À RETENIR
═══════════════════════════════════════════════════════════════

✓ Le système fonctionne 24/7 sans intervention
✓ Chaque module est indépendant mais interconnecté
✓ Hangfire orchestre toutes les tâches planifiées
✓ Les erreurs sont gérées automatiquement (retry)
✓ Tous les événements sont tracés dans les logs
✓ Notifications multi-canaux (Email/WhatsApp/Chime)
✓ Performance : 2-10 secondes par tâche
✓ Fiabilité : 98-99% de taux de succès

═══════════════════════════════════════════════════════════════

Pour plus de détails, consultez :
→ EXPLICATION_FONCTIONNELLE_COMPLETE.md (détails complets)
→ DEMO_RAPIDE.txt (démarrage pratique)
→ GUIDE_PLANIFICATION_SIMPLE.md (guide planification)

═══════════════════════════════════════════════════════════════

